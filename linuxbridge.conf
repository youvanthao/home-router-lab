# Configuration document for linux bridge for virtual machine network management. This will be done with Network Manager, and I will use command completion for the configuration. I am configuring this as an administrative user. Network management with Nework Manager(nmcli) requires the user to be in the sudo or wheel group, unless they are root.
#
#	INTRODUCTION
#
# virbr0 is the default network created with libvirt for kvm virtual machines. It uses NAT(network address translation), which translates ip addresses. In this case, translating the internal virtual machine addresses to a single external address(our host machine's IP). This isolates virtual machines inside that network from the physical network, this effectively acts as a home router already, but without the hassle of manual configuration(I like doing things the hard way). Although handy, this network design is limited to the default NAT configuration libvirt provides. To create a our own home router, we have to be able to bridge our router to the physical network as if it was physically connected to it and then create our own NAT configuration on the router's internal interface for internal IP addresses.
#
# The issue is that when we change our virtual machine's network to bridged, we have to specify a bridge device; where there isn't one by default. It doesn't help that libvirt does not include built-in tools to create a bridged network. So how do we create this bridge? by using native linux networking tools to create a linux bridge for our planned bridged virtual machines such as our router. The good thing is that network manager toolset allows us to create bridge interfaces. Another popular way of creating and managing linux networks is the "ip" command. Although it is a convenient tool, it does not have the same persistent quality as network manager(persistent, as in it will survive reboots). You could also manually edit network files; but this is not recommended because each distribution may have different directories of where the network configuration files are located.
#
# Install Network Manager on your machine. For RHEL based distributions, network manager is preinstalled. For Debian based distributions, run the following command.
$ sudo apt install network-manager

# Run the nmcli connection command to check for connections. Usually this is done with "nmcli connection show"; but since the nmcli tool supports command completion, we can use that to our advantage to shorten the command, speeding up and simplifying the process of manually inputting commands. 
# The "show" part of the command is not necessary for the nmcli command to display connections; but for reference purposes, I will use it in this documentation, shortened to "sh"
$ nmcli con sh
NAME          UUID                                  TYPE      DEVICE 
netplan-eno1  10838d80-caeb-349e-ba73-08ed16d4d666  ethernet  eno1   
lo            682441f9-f69b-4377-aa6e-2e47fae56fb8  loopback  lo     
virbr0        5cd03951-f821-4d84-a7fb-19125660d5fc  bridge    virbr0
 
# Create a linux bridge using the nmcli command.
$ nmcli con add type bridge con-name br0 ifname br0
Connection 'br0' (25dc2ea4-6562-4493-b806-7947d020ac2e) successfully added.
# The option for type=bridge creates a linux bridge connection. Con-name=br0 and ifname=br0 are names for the connection and network device, which stands for "Bridge0".
# 
# This linux bridge will essentially act as a network switch for our bridged devices to connect to. Like a switch, it can accommodate multiple device connections and handle frames as a switch would.
#
# If we check our network connections again with the nmcli command, we get this.
$ nmcli con sh 
NAME          UUID                                  TYPE      DEVICE 
netplan-eno1  10838d80-caeb-349e-ba73-08ed16d4d666  ethernet  eno1   
br0	      25dc2ea4-6562-4493-b806-7947d020ac2e  bridge    br0   
lo            682441f9-f69b-4377-aa6e-2e47fae56fb8  loopback  lo     
virbr0        5cd03951-f821-4d84-a7fb-19125660d5fc  bridge    virbr0 

# Now we need to make the vsw0 bridge the controller for our ethernet device.
$ nmcli con mod netplan-eno1 controller br0
# This should connect our host machine's ethernet interface(eno1) to our bridge(br0). The complete infrastructure with virtual machines should look something like this:
# 	
# 	|pn|-----|br|-----|e|-----|h|
# 		  |
# 	     -----|-----
# 	     |    |    |
# 	    |vm| |vm| |vm|
# 
#	pn = physical network
#	e = ethernet nic(eno1)
#	br = linux bridge
#	h = host machine
#	vm = virtual machine
#
# Think of this bridge device as a physical switch we just connected our host machine to. Through this bridge, we will be able to connect out virtual machines to the physical network like plugging them into a physical switch. :)
#
# The next step is to change our virtual router's vm settings to connect to the bridged interface. And congratulations, we are done! The next step is to manually configure our vyos router, which I will cover in the next document.
